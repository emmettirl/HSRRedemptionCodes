name: Build EXE

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller beautifulsoup4 selenium requests python-dotenv

    - name: Build EXE
      run: |
        pyinstaller --onefile --console main.py

    - name: Upload EXE
      uses: actions/upload-artifact@v3
      with:
        name: code_redeemer
        path: dist/main.exe

    - name: Fetch all tags
      run: git fetch --tags

    - name: Increment version tag
      id: increment_tag
      run: |
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")
        if [ "$latest_tag" = "v0.0.0" ]; then
          new_tag="v0.0.0"
        else
          IFS='.' read -r -a parts <<< "${latest_tag#v}"
          major=${parts[0]}
          minor=${parts[1]}
          patch=${parts[2]}
          patch=$((patch + 1))
          new_tag="v$major.$minor.$patch"
        fi
        echo "new_tag=$new_tag" >> $GITHUB_ENV
      shell: bash

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.new_tag }}
        release_name: Release ${{ env.new_tag }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/main.exe
        asset_name: main.exe
        asset_content_type: application/octet-stream